fun sout(*args, end = "\n"): void {
    /*
     * This function prints the given arguments to the standard output.
     * @param: args: the arguments to print.
     * @param: end: the end of the output.
     */
    encapsulated
}

fun size(arg): int {
    /*
     * This function returns the size of an iterable data.
     * @param: arg: the iterable data to get the size.
     * @return: an int type data.
     */
    encapsulated
}

class List: public {
    var listValue: list
    var length: int

    ctor() {
        this.listValue = []
        this.length = 0
    }

    ctor(listValue: list) {
        this.listValue = listValue
        this.length = size(listValue)
    }

    fun at(index: int): any {
        if index >= this.length {
            ret null
        }
        if index < 0 {
            while index < 0 {
                index += this.length
            }
        }
        ret (this.listValue)[index]
    }

    fun getLength(): int {
        ret this.length
    }

    fun iterate(handler: funi): void {
        var i: int = 0
        while i < this.length {
            handler(this.at(i), i)
            i += 1
        }
    }

    fun toString(): str {
        var result: str = "["
        this.iterate((item, index) -> {
            result += item
            if index < this.length - 1 {
                result += ", "
            }
        })
        result += "]"
        ret result
    }

    fun print(): void {
        sout(this.listValue)
    }

    fun sort(is_ascending: bool): void {
        fun quick_sort(arr: list): list {
            if size(arr) <= 1 {
                ret arr
            }
            var pivot = arr[0]
            var less: list
            var greater: list
            var i = 1
            while i < size(arr) {
                if arr[i] <= pivot {
                    less += arr[i]
                }
                i ++
            }
            i = 1
            while i < size(arr) {
                if arr[i] > pivot {
                    greater += arr[i]
                }
                i ++
            }
            ret quick_sort(less) + pivot + quick_sort(greater)
        }
        this.listValue = quick_sort(this.listValue)
    }
}

fun main(): void {
    var a: List = List([1, 3, 4, 2, 5])
    var a_str: str = a.toString()
    sout(a_str)
    sout(a)
    a.print()
    var iter_list: funi = () -> {
        a.iterate((item, index) -> {
            sout("item at index [", index, "]: ", item)
        })
    }
    iter_list()
    a.sort(true)
    a.print()
    iter_list()
}

main()
